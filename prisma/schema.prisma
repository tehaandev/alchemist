generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Document  Document[]
  ChatSession ChatSession[]
}

model Document {
  id         Int            @id @default(autoincrement())
  key        String         @unique
  filename   String
  status     DocumentStatus @default(UPLOADED)
  metadata   Json?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  uploadedBy String
  User       User           @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  // Indexes
  @@index([status])
  @@index([uploadedBy, status]) // Composite index for common query pattern
  @@index([createdAt])
}

model ChatSession {
  id         String    @id @default(cuid())
  createdBy  String
  User       User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  title      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt 
  messages   Message[]

  // Indexes
  @@index([id])
}

model Message {
  id            String   @id @default(cuid())
  session       ChatSession @relation(fields: [sessionId], references: [id])
  sessionId     String
  role          MessageRole
  content       String
  createdAt     DateTime @default(now())
  // Optionally store embeddings to re-use or debug:
  embeddingId   String?  

  // Indexes
  @@index([sessionId])
  @@index([id])
  @@index([embeddingId])
  @@index([role])
  @@index([createdAt])
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  EMBEDDED
  FAILED
}

enum MessageRole {
  USER
  LLM
}
